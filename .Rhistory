library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(dirs$base,"tcell_activation_timecourse.csv")
input_file
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
file_table  <- read.table(input_file,sep="\t",header = TRUE,stringsAsFactors = FALSE)
file_table
read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
file_table  <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
file_table
file_table  <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = TRUE) %>%
as_tibble()
file_table
file_table  <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
file_table
dir(here())
file.exists(file_table$file_source_value)
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_file) %>% kable_styling(full_width=FALSE)
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_file) %>% kable_styling(full_width=FALSE)
kable(tst_table) %>% kable_styling(full_width=FALSE)
library(shiny)
library(shinyWidgets)
library(dplyr)
library(dbplyr)
library(lubridate)
library(DBI)
library(RSQLite)
library(here)
library(DT)
library(tidyverse)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","shiny","OMOPOmics")
data_dir    <- file.path(here(),"data")
#Source.
source(file.path(base_dir,"functions.R"))
# connects to SQL database
con         <- DBI::dbConnect(RSQLite::SQLite(), "OMOP_tables.sqlite")
# lists tables in database, load into R.
tab_names   <- dbListTables(con)
tab_names   <- tab_names[!tab_names == "condition_occurence"] #Remove misspelled "condition_occurence.csv" name.
tabs        <- lapply(tab_names, function(x) tbl(con,x))
names(tabs) <- tab_names
#Key table: table that must always be inner_joined to ensure a path between tabs.
key_table   <- "specimen_table" #Is this valid? Should we be able to take any
#combination of tables? If so we need a way to
#trace a path through inner_joins.
#Bump key_table to front of line.
tabs        <- c(tabs[names(tabs)==key_table],tabs[names(tabs) != key_table])
#Default selections: column names that are automatically selected (UI toggle
# set to TRUE).
# Ad-hoc approach; a better UI should be made later, but for now include file
# names at a minimum.
def_cols    <- c("file_source_value")
a <- tabs[[1]]
dbGetQuery(a)
show_query(a)
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
class(show_query(a))
show_query(a) -> x
cat(x)
x$person_id
x[1]
x[2]
x[3]
x[4]
x[1]
x
a
show_query(a)
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
rm(list=ls())
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
tst_table
read_bed_file   <- function(bed_file_name=tst_table$local_file_name[1]){
base_col_names<- c("seqnames","start","end","name","score","strand")
tib <- as_tibble(fread(bed_file_name,sep="\t"))
if(ncol(tib) > length(base_col_names)){
base_col_names  <- c(base_col_names,paste0("col.",seq(from=1,to=ncol(tib)-length(base_col_names))))
}
colnames(tib)   <- base_col_names
return(makeGRangesFromDataFrame(tib,keep.extra.columns = TRUE))
}
tst_table
beds              <- lapply(tst_table$file_source_value,read_bed_file)
beds
beds
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
# Chunk 2: loadDataManual
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_table) %>% kable_styling(full_width=FALSE)
# Chunk 3: loadPromoterData
proms       <- promoters(TxDb.Hsapiens.UCSC.hg19.knownGene)
read_bed_file     <- function(bed_file_name=tst_table$local_file_name[1]){
base_col_names  <- c("seqnames","start","end","name","score","strand")
tib <- as_tibble(fread(bed_file_name,sep="\t"))
if(ncol(tib) > length(base_col_names)){
base_col_names<- c(base_col_names,paste0("col.",seq(from=1,to=ncol(tib)-length(base_col_names))))
}
colnames(tib)   <- base_col_names
return(makeGRangesFromDataFrame(tib,keep.extra.columns = TRUE))
}
beds              <- lapply(tst_table$file_source_value,read_bed_file)
names(beds)       <- tst_table$file_name
beds
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
# Chunk 2: loadDataManual
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_table) %>% kable_styling(full_width=FALSE)
# Chunk 3: loadPromoterData
proms       <- promoters(TxDb.Hsapiens.UCSC.hg19.knownGene)
read_bed_file     <- function(bed_file_name=tst_table$local_file_name[1]){
base_col_names  <- c("seqnames","start","end","name","score","strand")
tib <- as_tibble(fread(bed_file_name,sep="\t"))
if(ncol(tib) > length(base_col_names)){
base_col_names<- c(base_col_names,paste0("col.",seq(from=1,to=ncol(tib)-length(base_col_names))))
}
colnames(tib)   <- base_col_names
return(makeGRangesFromDataFrame(tib,keep.extra.columns = TRUE))
}
beds              <- lapply(tst_table$file_source_value,read_bed_file)
beds
tst_table$file_source_value
names(beds)       <- tst_table$file_source_value
names(beds)       <- basename(tst_table$file_source_value)
beds
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
# Chunk 2: loadDataManual
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_table) %>% kable_styling(full_width=FALSE)
# Chunk 3: loadPromoterData
proms       <- promoters(TxDb.Hsapiens.UCSC.hg19.knownGene)
# Chunk 4: readBedFiles
read_bed_file     <- function(bed_file_name=tst_table$local_file_name[1]){
base_col_names  <- c("seqnames","start","end","name","score","strand")
tib <- as_tibble(fread(bed_file_name,sep="\t"))
if(ncol(tib) > length(base_col_names)){
base_col_names<- c(base_col_names,paste0("col.",seq(from=1,to=ncol(tib)-length(base_col_names))))
}
colnames(tib)   <- base_col_names
return(makeGRangesFromDataFrame(tib,keep.extra.columns = TRUE))
}
beds              <- lapply(tst_table$file_source_value,read_bed_file)
names(beds)       <- basename(tst_table$file_source_value)
shiny::runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
runApp('src/R/shiny/OMOPOmics')
library(shiny)
library(shinyWidgets)
library(dplyr)
library(dbplyr)
library(lubridate)
library(DBI)
library(RSQLite)
library(here)
library(DT)
library(tidyverse)
runApp('src/R/shiny/OMOPOmics')
here()
library(here)
?here
here()
library(here)
# setwd to OMOPomics
setwd(here())
here()
# setwd to OMOPomics
setwd(here::here())
runApp('src/R/shiny/OMOPOmics')
library(shiny)
library(shinyWidgets)
library(dplyr)
library(dbplyr)
library(lubridate)
library(DBI)
library(RSQLite)
library(DT)
library(tidyverse)
library(here)
# setwd to OMOPomics
setwd(here::here())
here()
here::here()
# setwd to OMOPomics
setwd(here::here())
base_dir    <- file.path(here(),"src","R","shiny","OMOPOmics")
# setwd to OMOPomics
here        <- here::here
setwd(here::here())
base_dir    <- file.path(here(),"src","R","shiny","OMOPOmics")
data_dir    <- file.path(here(),"data")
runApp('src/R/shiny/OMOPOmics')
rm(list=ls())
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
input_file
# setwd to OMOPomics
here      <- here::here
setwd(here())
here()
base_dir    <- file.path(here(),"src","R","atac_example")
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
here      <- here::here
setwd(here())
here()
base_dir    <- here("src","R","atac_example")
knitr::opts_chunk$set(echo = FALSE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
tst_table
kable(tst_table) %>% kable_styling(full_width=FALSE)
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
here      <- here::here
setwd(here())
here()
base_dir    <- here("src","R","atac_example")
knitr::opts_chunk$set(echo = TRUE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
input_file
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
tst_table
kable(tst_table) %>% kable_styling(full_width=FALSE)
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_table) %>% kable_styling(full_width=FALSE)
# Chunk 1: setup
library(GenomicRanges)
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyverse)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(scales)
library(data.table)
library(dbplyr)
library(RSQLite)
library(DBI)
library(here)
# setwd to OMOPomics
here      <- here::here #Competition for "here" from out-dated lubridate function.
setwd(here())
here()
base_dir    <- here("src","R","atac_example")
knitr::opts_chunk$set(echo = TRUE)
dirs      <- list(base=file.path("~/OMOPOmics"))
filter    <- dplyr::filter
select    <- dplyr::select
mutate    <- dplyr::mutate
arrange   <- dplyr::arrange
rename    <- dplyr::rename
melt      <- reshape2::melt
# Chunk 2: loadDataManual
input_file  <- file.path(base_dir,"tcell_activation_timecourse.csv")
tst_table   <- read.table(input_file,sep=",",header = TRUE,stringsAsFactors = FALSE) %>%
as_tibble()
kable(tst_table) %>% kable_styling(full_width=FALSE)
tst_table
beds
proms       <- promoters(TxDb.Hsapiens.UCSC.hg19.knownGene)
read_bed_file     <- function(bed_file_name=tst_table$local_file_name[1]){
base_col_names  <- c("seqnames","start","end","name","score","strand")
tib <- as_tibble(fread(bed_file_name,sep="\t"))
if(ncol(tib) > length(base_col_names)){
base_col_names<- c(base_col_names,paste0("col.",seq(from=1,to=ncol(tib)-length(base_col_names))))
}
colnames(tib)   <- base_col_names
return(makeGRangesFromDataFrame(tib,keep.extra.columns = TRUE))
}
beds              <- lapply(tst_table$file_source_value,read_bed_file)
names(beds)       <- basename(tst_table$file_source_value)
beds
test_overlaps   <- function(gr_quer=beds[[1]],gr_subj=proms){
olaps <- findOverlaps(query = gr_quer,subject = gr_subj)
out_vec <- rep(FALSE,length(gr_subj))
out_vec[subjectHits(olaps)] <- TRUE
return(out_vec)
}
shiny::runApp('src/R/shiny/OMOPOmics')
