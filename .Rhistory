setwd("~Downloads")
pwd()
setwd("~/Downloads")
### Calculating CNSL copy number (CN) of each sample at each CNSL probing site.
# Upload input file.
setwd("~/Downloads")
raw=read.csv("cnsl_data.csv", header = T, row.names = 1)
# Extract reads columns.
data <- raw[ , 2:101]
# Slip data into CNSL and non-CNSL.
CNSL <- data[ ,1:50]
nonCNSL <- data[ ,51:100]
# Col-wise normalization of nonCNSL data.
nonCNSL_Normed <- sweep(nonCNSL, 2, colMeans(nonCNSL), FUN="/")
# Row-wise normalization of nonCNSL data, taking reciprocal to get the scaling factor (sf) for CNSL data.
nonCNSL_Normed$sf <- 1/(rowMeans(nonCNSL_Normed))
# Normalize CNSL data by sf calculated from nonCNSL data.
CNSLnormed <- CNSL*(nonCNSL_Normed$sf)
# Normalize CNSL data again to have seqnencing depth normalized.
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, median), FUN="/")
# Get copy number of CNSL data.
CNSL_CopyNumber <- CNSLnormed*2
# Add ethnicity information to CNSL copy number data.
CNSL_CopyNumber$ethnicity <- raw$ethnicity
# Subset data into seperated tables by ethnicity.
CNSL_CopyNumber_A=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "A", ]
CNSL_CopyNumber_B=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "B", ]
CNSL_CopyNumber_C=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "C", ]
# Extract CN columns.
CNSL_CopyNumber <- CNSL_CopyNumber[ ,1:50]
CNSL_CopyNumber_A <- CNSL_CopyNumber_A[ ,1:50]
CNSL_CopyNumber_B <- CNSL_CopyNumber_B[ ,1:50]
CNSL_CopyNumber_C <- CNSL_CopyNumber_C[ ,1:50]
# Export data for plotting.
write.csv(CNSL_CopyNumber, file="CNSL_CopyNumber.csv")
write.csv(CNSL_CopyNumber_A, file="CNSL_CopyNumber_A.csv")
write.csv(CNSL_CopyNumber_B, file="CNSL_CopyNumber_B.csv")
write.csv(CNSL_CopyNumber_C, file="CNSL_CopyNumber_C.csv")
### Examining the frequency of deletions and duplications.
# Convert copy numbers into categories. CUATION: the cutoffs set here might have effcets on final results.
CN <- matrix(0, dim(CNSL_CopyNumber)[1], dim(CNSL_CopyNumber)[2])
for (i in 1:dim(CNSL_CopyNumber)[1])
{
for (j in 1:dim(CNSL_CopyNumber)[2])
{
if(CNSL_CopyNumber[i,j]>=0 && CNSL_CopyNumber[i,j]<1.5){CN[i,j] <- "1CN"}
else if(CNSL_CopyNumber[i,j]>=1.5 && CNSL_CopyNumber[i,j]<2.5){CN[i,j] <- "2CN"}
else if(CNSL_CopyNumber[i,j]>=2.5 && CNSL_CopyNumber[i,j]<4){CN[i,j] <- "3CN"}
else{CN[i,j] <- "NA"}
}
}
# Data formatting.
CN <- as.data.frame(CN)
colnames(CN) <- colnames(CNSL_CopyNumber)
CN$ethnicity <- raw$ethnicity
# Add an index col to the total samples before the filtering.
CN$indx <- paste0("indx_", (1:10000))
# Remove bad probes. CAUTION: this will change the origical col positions of probes.
CN <- CN[, c(-6, -24, -47)]
# Remove rows contain NA.
CN_rmNA <- CN[rowSums(CN == "NA") == 0,]
# Keep rows/samples with 4 or more consecutive deletion/1CN or duplication/3CN.
clean <- CN_rmNA[apply(CN_rmNA, 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
### Split samples by index sites.
# Starting from index 4.
Indx_4<- cbind(clean[, 10:39], "ethnicity"=clean$ethnicity, "indx"=clean$indx)
# Unique to index 4.
Indx_4_only <- Indx_4[apply(Indx_4[,1:10], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 3 from index 4 data. Unique to index 3.
Indx_3 <- Indx_4[-match(Indx_4_only$indx, Indx_4$indx), ]
Indx_3_only <- Indx_3[apply(Indx_3[,11:16], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_only
Indx_2_only
Indx_3_only
Indx_4_only
Indx_4_CN1 <- Indx_4[apply(Indx_4[,1:10], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_4_CN1 <- Indx_4[apply(Indx_4[,1:10], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_4_CN1 <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) )),]
Indx_4_CN1
nrow(Indx_4_CN1)
nrow(CN)
nrow(CN[CN$ethnicity == "A",])
nrow(Indx_4)
nrow(Indx_4_only)
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_a_only)
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_3)
nrow(Indx_2)
nrow(Indx_1)
nrow(Indx_2_only) + nrow(Indx_1_only)
View(Indx_2)
Indx_1 <- Indx_2[-match(Indx_2_only$indx, Indx_2$indx), ]
View(Indx_1)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_4_CN1 <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) )),]
Indx_2
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
# Isolate index 3 from index 4 data. Unique to index 3.
Indx_3 <- Indx_4[-match(Indx_4_only$indx, Indx_4$indx), ]
Indx_3_only <- Indx_3[apply(Indx_3[,11:16], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only)
nrow(Indx_1_only)
nrow(Indx_3)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 3) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 3) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 2) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 2) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2[,17:23]
Indx_3
nrow(Indx_3)
Indx_3_only <- Indx_3[apply(Indx_3[,11:16], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_3)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_3)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_3)
nrow(Indx_4)
nrow(Indx_2)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_2[,24:27]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[-(apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) ))),]
Indx_1_only
Indx_x <- Indx_2[-match(Indx_1_only$indx, Indx_2$indx), ]
Indx_x
Indx_x <- Indx_2[-match(Indx_2_only$indx, Indx_2$indx), ]
Indx_x
Indx_x <- Indx_2[-match(Indx_1_only$indx, Indx_2$indx), ]
Indx_x
Indx_x[,24:27]
Indx_2
Indx_2
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_1_only <- Indx_2[-match(Indx_2_only$indx, Indx_2$indx), ]
Indx_1_only
Indx_x <-  Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
Indx_x
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1 <- Indx_2[-match(Indx_2_only$indx, Indx_2$indx), ]
Indx_x <-  Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
# Isolate index 2 from index 3 data. Unique to index 2.
Indx_2 <- Indx_3[-match(Indx_3_only$indx, Indx_3$indx), ]
Indx_2_only <- Indx_2[apply(Indx_2[,17:23], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1 <- Indx_2[-match(Indx_2_only$indx, Indx_2$indx), ]
Indx_x <-  Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
Indx_x
Indx_1
Indx_1_only
nrows(Indx_1)
nrow(Indx_1)
nrow(Indx_1_only)
Indx_x <- Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
Indx_x <- Indx_1[match(Indx_1_only$indx, Indx_1$indx), ]
Indx_x
Indx_x <- Indx_1[-(match(Indx_1_only$indx, Indx_1$indx)), ]
Indx_x <- Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
nrow(Indx_2)
nrow(Indx_2_only)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 3) | (rle(x)$values == "3CN" & rle(x)$lengths >= 3) )),]
nrow(Indx_1_only)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 2) )),]
nrow(Indx_1_only)
Indx_x <- Indx_1[-match(Indx_1_only$indx, Indx_1$indx), ]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
CN[CN$ethnicity == "B",]
x <- CN[CN$ethnicity == "B",]
View(x)
x <- CN[CN$ethnicity == "B",] != "2CN"
View(x)
source('~/.active-rstudio-document', echo=TRUE)
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_4)
rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
x <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(x$indx, Indx_4$indx), ]
Indx_1_only
x <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_1_3CN
Indx_4[-match(x$indx, Indx_4$indx), ]
Indx_2[,24:27]
Indx_1_3CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 2)),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 2)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 2)),]
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 2) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 2)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 2)),]
nrow(Indx_2)
nrow(Indx_2_only) + nrow(Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,23:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,23:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,23:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,23:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,22:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,22:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,22:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4))
]
nrow(CN_rmNA)
Indx_2[,24:27]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,25:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(Indx_4_only) + nrow(Indx_3_only) + nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_4)
# Isolate index 1 from index 3 data. Unique to index 1.
Indx_1_only <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( (rle(x)$values == "1CN" & rle(x)$lengths >= 4) | (rle(x)$values == "3CN" & rle(x)$lengths >= 4) )),]
Indx_1_1CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "1CN" & rle(x)$lengths >= 4)),]
Indx_1_3CN <- Indx_2[apply(Indx_2[,24:27], 1, function(x) any( rle(x)$values == "3CN" & rle(x)$lengths >= 4)),]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only)
Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(Indx_2_only) + nrow(Indx_1_only)
nrow(Indx_2)
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
[-match(identified$indx, Indx_4$indx), ]
Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(Indx_4[-match(identified$indx, Indx_4$indx), ])
x <- nrow(Indx_4[-match(identified$indx, Indx_4$indx), ])
x <- nrow(Indx_4[-match(identified$indx, Indx_4$indx), ])
x <- Indx_4[-match(identified$indx, Indx_4$indx), ]
View(x)
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Index_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only))
nrow(Indx4)
nrow(Indx4)
nrow(Indx_4)
nrow(rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only))
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Index_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only))
nrow(Indx_4)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
nrow(rbind(Indx_4_only,Indx_3_only,Indx_2_only,Indx_1_only))
nrow(Indx_4)
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
identified <- rbind(Indx_4_only,Indx_3_only,Indx_2_only)
Indx_1_only <- Indx_4[-match(identified$indx, Indx_4$indx), ]
nonCNSL_Normed
1/(rowMeans(nonCNSL_Normed))
CNSL*(nonCNSL_Normed$sf
)
View(nonCNSL)
View(nonCNSL_Normed)
CNSL*(nonCNSL_Normed$sf)
sweep(CNSLnormed, 2, apply(CNSLnormed, 2, median), FUN="/")
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, mean), FUN="/")
sweep(CNSLnormed, 2, apply(CNSLnormed, 2, mean), FUN="/")
colSums(CNSLnormed)
# Normalize CNSL data again to have seqnencing depth normalized.
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, median), FUN="/")
colSums(CNSLnormed)
# Normalize CNSL data again to have seqnencing depth normalized.
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, mean), FUN="/")
# Get copy number of CNSL data.
CNSL_CopyNumber <- CNSLnormed*2
# Add ethnicity information to CNSL copy number data.
CNSL_CopyNumber$ethnicity <- raw$ethnicity
colSums(CNSLnormed)
# Normalize CNSL data again to have seqnencing depth normalized.
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, median), FUN="/")
CNSLnormed
colSums(CNSLnormed)
median(CNSLnormed)
apply(CNSLnormed, 2, median
)
# Normalize CNSL data by sf calculated from nonCNSL data.
CNSLnormed <- CNSL*(nonCNSL_Normed$sf)
apply(CNSLnormed, 2, median)
CNSL_CopyNumber_B=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "B", ]
CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "A", ]
CNSL_CopyNumber
write.csv(CNSL_CopyNumber, file="CNSL_CopyNumber.csv")
# Normalize CNSL data again to have seqnencing depth normalized.
CNSLnormed <- sweep(CNSLnormed, 2, apply(CNSLnormed, 2, mean), FUN="/")
# Get copy number of CNSL data.
CNSL_CopyNumber <- CNSLnormed*2
# Add ethnicity information to CNSL copy number data.
CNSL_CopyNumber$ethnicity <- raw$ethnicity
# Subset data into seperated tables by ethnicity.
CNSL_CopyNumber_A=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "A", ]
CNSL_CopyNumber_B=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "B", ]
CNSL_CopyNumber_C=CNSL_CopyNumber[CNSL_CopyNumber$ethnicity == "C", ]
# Extract CN columns.
CNSL_CopyNumber <- CNSL_CopyNumber[ ,1:50]
CNSL_CopyNumber_A <- CNSL_CopyNumber_A[ ,1:50]
CNSL_CopyNumber_B <- CNSL_CopyNumber_B[ ,1:50]
CNSL_CopyNumber_C <- CNSL_CopyNumber_C[ ,1:50]
# Export data for plotting.
write.csv(CNSL_CopyNumber, file="CNSL_CopyNumber.csv")
# Export data for plotting.
write.csv(CNSL_CopyNumber, file="CNSL_CopyNumber.csv")
setwd("~Downloads")
setwd("~")
setwd("~/Downloads")
raw=read.csv("ngs.txt", header = T, row.names = 1)
View(raw)
raw=read.tsv("ngs.txt", header = T, row.names = 1)
read.table("ngs.txt", header = T, row.names = 1)
read.table("ngs.txt", header = F, row.names = 1)
read.table("ngs", header = T, row.names = 1)
read.table("ngs.txt", header = T, row.names = 1, sep = "\t")
read.table("ngs.txt", header = T, row.names = 1, sep = "\t")
read.table("ngs.txt", header = T, row.names = 1, sep = "\t")
read.table("ngs.txt", header = T, sep = "\t")
setwd("~/Downloads")
ngs.txt <- read.table("ngs.txt", header = T, sep = "\t")
ngs <- read.table("ngs.txt", header = T, sep = "\t")
ngs$qc <- NULL
ngs
ngs$ <- NULL
ngs <- read.table("ngs.txt", header = T, sep = "\t")
details <- read.table("GSE60682_details.tsv", header = T, sep = "\t")
details
ngs$disease <- details$disease
ngs
ngs$disease <- NULL
ngs
ngs
row.names(ngs)
col.names(ngs)
colnames(ngs)
ngs$readlength[58]
ngs$readlength[57x]
ngs$readlength[57]
ngs$readlength[30]
ngs$readlength[7,]
ngs$readlength[7,]
ngs$readlength[3,]
ngs$readlength[,3]
ngs$readlength[3]
ngs$readlength
ngs$readlength
ngs$read_length[50]
ngs$read_length[58]
ngs$read_length[58] <- 0
ngs <- read.table("ngs.txt", header = T, sep = "\t")
details <- read.table("GSE60682_details.tsv", header = T, sep = "\t")
colnames(ngs)
ngs$read_length[58] <- 0
write.table(ngs, file = "ngs.txt", sep = "\t")
ngs <- read.table("ngs.txt", header = T, sep = "\t")
molecular_test <- <- read.table("molecular_test.txt", header = T, sep = "\t")
molecular_test <- read.table("molecular_test.txt", header = T, sep = "\t")
person <- read.table("person.txt", header = T, sep = "\t")
person <- read.table("person_table.txt", header = T, sep = "\t")
source_provider <- read.table("source_provider_table.txt", header = T, sep = "\t")
specimen <- read.table("specimen_table.txt", header = T, sep = "\t")
molecular_test
specimen
person
colnames(ngs)
colnames(molecular_test)
colnames(person)
colnames(source_provider)
colnames(specimen)
person
install.packages("tidyverse")
library(tidyverse)
?dplyr()
ngs %>%
filter(reference_genome_source_value == 0)
ngs$reference_genome_source_value
ngs
ngs %>%
filter(assay_id == 0)
ngs %>%
filter(assay_id == X49)
ngs %>%
filter(assay_id == "X49")
?mutate()
assay_occurrence <- read.csv("assay_occurrence.csv", header = T)
provider_table <- read.csv("provider_table.csv", header = T)
specimen_table <- read.csv("specimen_table.csv", header = T)
assay_occurrence_data <- read.csv("assay_occurrence_data.csv", header = T)
person_table <- read.csv("person_table.csv", header = T)
View(assay_occurrence)
View(assay_occurrence_data)
colnames(assay_occurrence)
View(specimen_table)
colnames(person_table)
person_table %>%
filter(gender_concept_id == "male")
person_table$gender_concept_id
person_table %>%
filter(gender_source_value == "male")
assay_occurrence
condition_occurrence %>%
filter(gender_source_value == "male")
condition_occurrence %>%
filter(gender_source_value == "male")
condition_occurrence <- read.csv("condition_occurrence_table.csv", header = T)
install.packages("DBI")
install.packages("DBI")
libary("DBI"")
libary("DBI"")
libary("DBI")
library(DBI)
library(DBI)
library (tidyverse)
dbListTables(con)
con <- dbConnect(RSQLite::SQLite(), dbname = ":memory:")
dbListTables(con)
?dbConnect()
?dbConnect
drv <- dbDriver("SQLite")
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbpath)
dbpath <- "../../data/SQL_example_db/World.sql"
con <- dbConnect(drv, dbpath)
setwd("/Users/amf198/github/OMOPOmics")
dbpath <- "../../data/example_SQL_db/world.sql"
drv <- dbDriver("SQLite")
con <- dbConnect(drv, dbpath)
