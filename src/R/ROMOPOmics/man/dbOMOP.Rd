% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbOMOP.R
\name{dbOMOP}
\alias{dbOMOP}
\title{dbOMOP.R}
\usage{
dbOMOP(
  input_files,
  db_prefix = "OMOP_db",
  rebuild = FALSE,
  output_dir = NULL,
  csv_to_sqlite_location = NULL,
  omop_definitions_csv = NULL,
  return_cmd_only = FALSE
)
}
\arguments{
\item{input_files}{Filenames for standard input CSV files.}

\item{rebuild}{If TRUE, existing database files are overwritten.}

\item{output_dir}{Directory in which output files, including OMOP tables and the database file, will be placed.}

\item{csv_to_sqlite_location}{csv-to-sqlite executable location, if path is to be bypassed.}

\item{omop_definitions_csv}{Alternate CSV file with standard input column names and their respective OMOP equivalents. If not provided, package default is used from extdata.}

\item{return_cmd_only}{For debugging purposes; if TRUE, the csv-to-sqlite command executed by buildSQLDB() is returned rather than a database connection.}

\item{db_file}{Filename of the resulting database, which will be placed in the output directory.}
}
\description{
Wrapper function that should encapsulate most of the behavior of ROMOPOmics.
Given a list of standard tables and a destination database name, function
first checks if that database file exists (filename.sqlite). If so, and if
rebuild is not set to TRUE, function returns a connection to the existing
database, with a warning if rebuild is missing. If the database file isn't
found or rebuild == TRUE, function combines each input CSV file into a
comprehensive table with readStandardTables(), adds all required indices
based on OMOP tables in the definition file, writes these tables with
indices to CSVs in the <omop_tables> directory with outputOMOPTables(), and
finally builds the database with buildSQLDB(). In either case, the new/
existing database file is read into memory using DBI::dbConnect() and
RSQLite::SQLite().
}
